@startuml

class ToDoListApplication {
    +main(String[] args)
    +start()
        'this method will load the fxml file'
        'it will also create a scene with its title'
        'catch all the exception errors and prints them'
}

class Controller {
    'attributes'
        -Button completedButton
        -AnchorPane completedPane
        -DatePicker datePicker
        -Button deleteButton
        -Button deleteItemButton
        -Button enterButton
        -Button incompleteButton
        -AnchorPane incompletePane
        -ListView<Task> itemList
        -ListView<Task> itemList_completed
        -ListView<Task> itemList_incomplete
        -TextField itemText
        -TextField listTitle
        -MenuItem loadButton
        -Button planButton
        -AnchorPane planPane
        -MenuItem saveButton

    'methods'
        'This method will make the title text field change-able
        +void changeTitle(KeyEvent event)
        'This method will read the input and show it into the list view
        +void enteredItemAction(ActionEvent event)
        'This method is responsible for saving and loading a file
        +void fileActionButton(ActionEvent event)
        'This method is responsible for sorting the incomplete tasks
        +void incomplete(MouseEvent event)
        'This method is responsible for removing an item/s on the list view and array list
        +void removeButton(ActionEvent event)
        'This method is responsible for showing the anchor pane when a corresponding button is clicked
        +void tabButtonAction(ActionEvent event)
}

class BottomBarFunctions {
    'methods:
    'This method is responsible for adding an item into the list
    +ObservableList<Task> addItem(DatePicker datePicker, TextField itemText, ListView<Task> itemList,
    ObservableList<Task> item)
    'This method is responsible for replacing/overwriting an item from the list
    +ObservableList<Task> replaceItem(DatePicker datePicker, TextField itemText, ListView<Task> itemList,
    ObservableList<Task> item, int index)
    'This method is responsible for removing an item from the list
    +ObservableList<Task> removeItem(int index, ListView<Task> itemList, ObservableList<Task> item)
}

class File {
    'methods:
    'This is a helper method for saveList method
    -saveToText(java.io.File filename, ObservableList<Task> tasks)
    'This is a helper method for the loadList method
    -List<Task> loadText(String filename)
    'This method is responsible for loading a file and reading the input
    +loadList(ListView<Task> itemList, ObservableList<Task> item)
    'This method is responsible for saving a file and writing the output into the file
    +void saveList(ObservableList<Task> item)
}

class Initialize {
    'methods:
    'This method will be used when initializing the application. This will show check boxes on the listview
    +void listCheckBox(ListView<Task> itemList, ObservableList<Task> checkedItem)
    'This method will be used for putting the selected item into the text field
    +void listListener(ListView<Task> itemList, TextField itemText)
}

class TopBarFunctions {
    'methods:
    'This method is responsible for clearing all the items from the list
    +ObservableList<Task> clearList(ListView<Task> itemList, ObservableList<Task> item)
    'This method is responsible for updating the title of the list
    +void title(TextField listTitle, Button button)
}

class Task {
    'methods:
    'This method is responsible for storing the date from the date picker
    +String getDate()
    'This method is responsible for storing the text written on the text field
    +String getDescription()
    'This method is responsible for showing the output from the collected data
    +String toString()
}

class SortTask {
    'methods:
    'This method is responsible for sorting the unchecked items and store it into a list
    +ObservableList<Task> incomplete(ObservableList<Task> uncheckedItem, ObservableList<Task> temp,
                                ObservableList<Task> checkedItem, ListView<Task> itemList_incomplete)
    'This method will get all the items from the list view, so it can be showed on the "all" tab`
    +ObservableList<Task> all(ListView<Task> all_item, ObservableList<Task> item)
}

ToDoListApplication <|-- javafx.application.Application
ToDoListApplication *-- Controller
Controller *-- BottomBarFunctions
Controller *-- File
Controller *-- Initialize
Controller *-- TopBarFunctions
Controller *-- Task
Controller *-- SortTask
@enduml